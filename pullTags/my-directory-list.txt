The file csvRelationships.py contains:
import xml.etree.ElementTree as ET
import csv
import sys
import os
import re

def writeCSV(fileName):
  purl = re.compile('((https?):((//)|(\\\\))+([\w\d:#@%/;$()~_?\+-=\\\.&](#!)?)*)')
  pid = re.compile('fsu:[0-9]*')
  header = ['Source', 'Target']
  NS = {'oai_dc': 'http://www.openarchives.org/OAI/2.0/oai_dc/', 'dc': 'http://purl.org/dc/elements/1.1/', 'mods': 'http://www.loc.gov/mods/v3'}
  with open(fileName + 'GEPHI' + '.csv', 'w') as f:
    writer = csv.writer(f, delimiter=';')
    writer.writerow(header)
    tree = ET.parse(fileName + '.xml')
    root = tree.getroot()
    for record in root.iterfind('.//{%s}dc' % NS['oai_dc'] ):
      for subject in record.iterfind('.//{%s}subject' % NS['dc']):
          data = []
          for identifier in record.iterfind('.//{%s}identifier' % NS['dc']):
              m = pid.search(identifier.text)
              if m and data:
                  pass
              elif m and not data:
                  data.append(m.group())
              elif not m:
                  pass
          data.append(subject.text)
          writer.writerow(data)

name = os.path.splitext(sys.argv[1])[0]
writeCSV(name)
print('Spreadsheet created.')

The file LICENSE contains:
The MIT License (MIT)

Copyright (c) 2015 Matthew Roland Miguez

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
The file pullName.py contains:
import xml.etree.ElementTree as ET
import sys
import os
import re

newLine = re.compile(r"^\n\s+")
NS = {'mods': 'http://www.loc.gov/mods/v3'}

def pull(filename):
    tree = ET.parse(filename + '.xml')
    root = tree.getroot()
    for record in root.iterfind('.//{%s}mods' % NS['mods']):
        for name in record.iterfind('.//{%s}name' % NS['mods']):
            with open(filename + 'Name.txt', 'w') as f:
                fullName = []
                for child in name:
                    if child.text is not None:
                        fullName.append(child.text)
                for item in fullName:
                    match = newLine.match(item)
                    if match:
                        fullName.remove(match.string)
                fullName.sort()    
                print(fullName)

fileName = os.path.splitext(sys.argv[1])[0]
pull(fileName)

The file pullSubject.py contains:
#!/usr/bin/env python3

import xml.etree.ElementTree as ET
import sys
import os.path
import argparse

NS = {'mods' : 'http://www.loc.gov/mods/v3', 'oai_dc' : 'http://www.openarchives.org/OAI/2.0/oai_dc/',
        'dc' : 'http://purl.org/dc/elements/1.1/'}

def pullMODS(filename):
    tree = ET.parse(filename)
    root = tree.getroot()
    for record in root.iterfind('.//{%s}mods' % NS['mods']):
        for subject in record.iterfind('.//{%s}subject' % NS['mods']):
            for child in subject:
                print(child.text)
                
def pullOAI(filename):
    tree = ET.parse(filename)
    root = tree.getroot()
    for record in root.iterfind('.//{%s}dc' % NS['oai_dc']):
        for subject in record.iterfind('.//{%s}subject' % NS['dc']):
            print(subject.text)
    
def pullDC(filename):
    print("dc selected, but not fully supported at the moment")    

parser = argparse.ArgumentParser()
parser.add_argument("file", help="input file")
parser.add_argument("-m", "--metadataPrefix", help="select metadata encoding of source file", 
                        choices=["mods", "dc", "oai_dc"], default="mods")
args = parser.parse_args()
fileName = args.file
if args.metadataPrefix == "mods":
    pullMODS(fileName)
elif args.metadataPrefix == "oai_dc":
    pullOAI(fileName)
elif args.metadataPrefix == "dc":
    pullDC(fileName)
The file README.md contains:
These two scripts pull all of the tags of a certain type out of a modsCollection document formatted in a *largely* human-friendly way.
Currently both scripts print to stdout, for further manipulation with command line tools such as `sort` and `uniq`.

